//  Created by Marvin Lee Kobert on 16.06.24.
//
//

import Foundation

private let kKotlinFileExtension = ".kt"
private let kSwiftFileExtension = ".swift"

enum SwiftVarTemplate {
  case kotlinThemeFile
  case swiftBaseFile
  case swiftColorsFile
  case swiftColorValuesFile
  case swiftRadiusFile
  case swiftSpacingFile

  var templateFileName: String {
    filename
  }

  var outputFileName: String {
    switch self {
    case .kotlinThemeFile:
      filename + kKotlinFileExtension
    case .swiftBaseFile, .swiftColorValuesFile, .swiftColorsFile, .swiftRadiusFile, .swiftSpacingFile:
      filename + kSwiftFileExtension
    }
  }

  var templateString: String {
    switch self {
    case .kotlinThemeFile:
      Self.kotlinThemeFileTemplate
    case .swiftBaseFile:
      ""
    case .swiftColorsFile:
      ""
    case .swiftColorValuesFile:
      ""
    case .swiftRadiusFile:
      ""
    case .swiftSpacingFile:
      ""
    }
  }

  private var filename: String {
    switch self {
    case .kotlinThemeFile, .swiftBaseFile:
      "UITheme"
    case .swiftColorsFile:
      "UITheme+Colors"
    case .swiftColorValuesFile:
      "UITheme+ColorValues"
    case .swiftRadiusFile:
      "UITheme+Radius"
    case .swiftSpacingFile:
      "UITheme+Spacing"
    }
  }
}

private extension SwiftVarTemplate {
  static var kotlinThemeFileTemplate: String {
    """
    //
    // Generated by SwiftVars
    // Variables Version {{ version }}
    //

    package {{ packageName }}

    object UITheme {
        object Color {
            object Colors {
                {%- if darkColorToken.count > 0 %}
                object DarkMode {
                    {% for colorToken in darkColorToken -%}
                    val {{ colorToken.varName }} = RawColors.{{ colorToken.colorName }}
                    {% endfor %}
                }
                {% endif %}

                {%- if lightColorToken.count > 0 %}
                object LightMode {
                    {% for colorToken in lightColorToken -%}
                    val {{ colorToken.varName }} = RawColors.{{ colorToken.colorName }}
                    {% endfor %}
                }
                {% endif %}
            }

            object RawColors {
                {% for rawColor in rawColors -%}
                val {{ rawColor.varName }} = Color({{ rawColor.hexValue }})
                {% endfor %}
            }
        }

        object Dimension {
            // Spacings
            {% for spacing in spacings -%}
            val {{ spacing.varName }}: Dp = {{ spacing.spacing }}.dp
            {% endfor %}

            // Radii
            {% for radius in radii -%}
            val {{ radius.varName }}: Dp = {{ radius.radius }}.dp
            {% endfor %}
        }
    }
    """
  }
}
